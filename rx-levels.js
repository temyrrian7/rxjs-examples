// rx-levels.js (starter)
// ‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ESM-—ñ–º–ø–æ—Ä—Ç–∏ RxJS —Ç–∞ —É—Ç–∏–ª—ñ—Ç–∏ –∑ ui.js
import { interval, fromEvent, merge, of, timer, concat } from "https://cdn.skypack.dev/rxjs@7";
import { map, startWith, switchMap, tap, delay, repeat, withLatestFrom } from "https://cdn.skypack.dev/rxjs@7/operators";
import { setLight, setSubscription, showLevel } from "./ui.js";

/* ================================================================
   üü¢ –†—ñ–≤–µ–Ω—å 1 ‚Äî ¬´–ü—Ä–æ—Å—Ç–∏–π —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä¬ª
   –ú–µ—Ç–∞: –∑—ñ–±—Ä–∞—Ç–∏ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π —Ü–∏–∫–ª —Å—Ç–∞–Ω—ñ–≤:
         —á–µ—Ä–≤–æ–Ω–∏–π ‚Üí –∂–æ–≤—Ç–∏–π ‚Üí –∑–µ–ª–µ–Ω–∏–π ‚Üí —á–µ—Ä–≤–æ–Ω–∏–π ‚Üí ...
   –ü—ñ–¥–∫–∞–∑–∫–∏:
   - —Å—Ç–≤–æ—Ä–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1000 –º—Å)
   - –º–∞–ø–∏ —ñ–Ω–¥–µ–∫—Å i % 3 –Ω–∞ –∫–æ–ª—ñ—Ä
   - –Ω–µ –∑–∞–±—É–≤–∞–π setSubscription(sub) –ø—ñ—Å–ª—è subscribe(...)
   ================================================================ */
export function level1() {
  showLevel("–†—ñ–≤–µ–Ω—å 1: –ü—Ä–æ—Å—Ç–∏–π —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä", { pedestrian: false, crossTraffic: false });

  // TODO(1): —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Ç—ñ–∫, —è–∫–∏–π –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É –≤–∏–¥–∞—î 0,1,2 –ø–æ –∫–æ–ª—É
  // const cycle$ = ...

  // TODO(2): –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è —ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –∫–æ–ª—ñ—Ä:
  // 0 -> 'red', 1 -> 'yellow', 2 -> 'green'
  // const sub = cycle$.subscribe(n => { ... });

  // TODO(3): –∑–±–µ—Ä–µ–≥—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ setSubscription(sub)
  // setSubscription(sub);

  // –¢–∏–º—á–∞—Å–æ–≤–æ (–≤–∏–¥–∞–ª–∏ –ø—ñ—Å–ª—è —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó): –∑–∞—Å–≤—ñ—Ç–∏–º–æ —á–µ—Ä–≤–æ–Ω–µ —è–∫ placeholder
  setLight("traffic-light", "red");
}

/* ================================================================
   üü° –†—ñ–≤–µ–Ω—å 2 ‚Äî ¬´–ö–Ω–æ–ø–∫–∞ –ø—ñ—à–æ—Ö–æ–¥–∞¬ª
   –ú–µ—Ç–∞: –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏ "–ü—ñ—à–æ—Ö—ñ–¥–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥" —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä –º–∞—î
         –Ω–µ–≥–∞–π–Ω–æ —Å—Ç–∞—Ç–∏ —á–µ—Ä–≤–æ–Ω–∏–º —ñ —Ç—Ä–∏–º–∞—Ç–∏ —Ü–µ–π —Å—Ç–∞–Ω N –º—Å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 2000),
         –ø—ñ—Å–ª—è —á–æ–≥–æ –∑–≤–∏—á–∞–π–Ω–∏–π —Ü–∏–∫–ª –ø—Ä–æ–¥–æ–≤–∂—É—î—Ç—å—Å—è.
   –ü—ñ–¥–∫–∞–∑–∫–∏:
   - fromEvent(btn, 'click') –¥–∞—î –ø–æ—Ç—ñ–∫ –∫–ª—ñ–∫—ñ–≤
   - –∑–∞–≤–µ–¥–∏ "—Ä–µ–∂–∏–º" normal/ped —á–µ—Ä–µ–∑ switchMap + timer
   - –∫–æ–º–±—ñ–Ω—É–π —Ä–µ–∂–∏–º –∑ –±–∞–∑–æ–≤–∏–º —Ü–∏–∫–ª–æ–º —á–µ—Ä–µ–∑ withLatestFrom
   ================================================================ */
export function level2() {
  showLevel("–†—ñ–≤–µ–Ω—å 2: –ö–Ω–æ–ø–∫–∞ –ø—ñ—à–æ—Ö–æ–¥–∞", { pedestrian: true, crossTraffic: false });

  const btn = document.getElementById("pedestrian-btn");

  // TODO(1): –±–∞–∑–æ–≤–∏–π —Ü–∏–∫–ª –∫–æ–ª—å–æ—Ä—ñ–≤ –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º (—è–∫ —É —Ä—ñ–≤–Ω—ñ 1), –º–æ–∂–Ω–∞ startWith('red')
  // const cycle$ = ...

  // TODO(2): –ø–æ—Ç—ñ–∫ —Ä–µ–∂–∏–º—ñ–≤:
  // - –ø—Ä–∏ –∫–ª—ñ–∫—É: –Ω–µ–≥–∞–π–Ω–æ 'ped', –ø–æ—Ç—ñ–º —á–µ—Ä–µ–∑ 2000 –º—Å –Ω–∞–∑–∞–¥ —É 'normal'
  // const mode$ = fromEvent(btn, 'click').pipe(
  //   switchMap(() => concat(of('ped'), timer(2000).pipe(map(()=>'normal')))),
  //   startWith('normal')
  // );

  // TODO(3): –∫–æ–º–±—ñ–Ω—É–≤–∞—Ç–∏ cycle$ –∑ mode$ —Ç–∞–∫, —â–æ–± –ø—Ä–∏ mode==='ped' –∑–∞–≤–∂–¥–∏ –º–∞–ª—é–≤–∞–≤—Å—è 'red'
  // const sub = cycle$.pipe(
  //   withLatestFrom(mode$),
  //   map(([color, mode]) => mode === 'ped' ? 'red' : color)
  // ).subscribe(color => setLight('traffic-light', color));

  // TODO(4): –∑–±–µ—Ä–µ–≥—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É
  // setSubscription(sub);

  // Placeholder, —â–æ–± –±—É–ª–æ –≤–∏–¥–Ω–æ –∫–Ω–æ–ø–∫—É (–≤–∏–¥–∞–ª–∏ –ø—ñ—Å–ª—è —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó)
  setLight("traffic-light", "yellow");
}

/* ================================================================
   üî¥ –†—ñ–≤–µ–Ω—å 3 ‚Äî ¬´–ü–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è¬ª
   –ú–µ—Ç–∞: —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –¥–≤–∞ —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä–∏:
         A: –∑–µ–ª–µ–Ω–∏–π ‚Üí –∂–æ–≤—Ç–∏–π ‚Üí all-red ‚Üí B: –∑–µ–ª–µ–Ω–∏–π ‚Üí –∂–æ–≤—Ç–∏–π ‚Üí all-red ‚Üí (–ø–æ–≤—Ç–æ—Ä)
         –∂–æ–¥–Ω–æ–≥–æ —Ä–∞–∑—É –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—á–∏ –¥–≤–æ—Ö –∑–µ–ª–µ–Ω–∏—Ö –æ–¥–Ω–æ—á–∞—Å–Ω–æ.
   –ü—ñ–¥–∫–∞–∑–∫–∏:
   - –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –ª–∞–Ω—Ü—é–∂–æ–∫ —Ñ–∞–∑ —á–µ—Ä–µ–∑ concat(of(...).pipe(tap(...), delay(...)), ...).repeat()
   - –∞–±–æ –∑—Ä–æ–±–∏—Ç–∏ –Ω–µ–≤–µ–ª–∏–∫–∏–π state machine —á–µ—Ä–µ–∑ scan
   - –º—ñ–∂ –Ω–∞–ø—Ä—è–º–∫–∞–º–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –∫–æ—Ä–æ—Ç–∫–∞ —Ñ–∞–∑–∞ "all-red"
   ================================================================ */
export function level3() {
  showLevel("–†—ñ–≤–µ–Ω—å 3: –ü–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è", { pedestrian: false, crossTraffic: true });

  // –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ (–º–æ–∂–µ—à –∑–º—ñ–Ω—é–≤–∞—Ç–∏)
  const G = 4000; // green ms
  const Y = 1200; // yellow ms
  const Rg = 400; // all-red ms

  // TODO(1): –æ–ø–∏—à–∏ —Ñ–∞–∑–∏ —è–∫ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å, —É –∫–æ–∂–Ω—ñ–π —Ñ–∞–∑—ñ —á–µ—Ä–µ–∑ tap(...) –º–∞–ª—é–π –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫–æ–ª—å–æ—Ä–∏:
  // - A green: A=green, B=red
  // - A yellow: A=yellow, B=red
  // - all-red: A=red, B=red
  // - B green: A=red, B=green
  // - B yellow: A=red, B=yellow
  //
  // –ü—ñ—Å–ª—è tap(...) –¥–æ–¥–∞–π delay(—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ñ–∞–∑–∏), —â–æ–± –ø–æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞–Ω.
  // –ó'—î–¥–Ω–∞–π —Ñ–∞–∑–∏ —á–µ—Ä–µ–∑ concat(...).pipe(repeat())
  //
  // const sequence$ = concat(
  //   of('A_G').pipe(tap(()=>{ ... }), delay(G)),
  //   of('A_Y').pipe(tap(()=>{ ... }), delay(Y)),
  //   of('AR').pipe(tap(()=>{ ... }), delay(Rg)),
  //   of('B_G').pipe(tap(()=>{ ... }), delay(G)),
  //   of('B_Y').pipe(tap(()=>{ ... }), delay(Y)),
  //   of('AR').pipe(tap(()=>{ ... }), delay(Rg))
  // ).pipe(repeat());

  // TODO(2): –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ sequence$ (–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ, —É—Å–µ —Ä–æ–±–∏–º–æ –≤ tap)
  // const sub = sequence$.subscribe();
  // setSubscription(sub);

  // Placeholder, —â–æ–± —â–æ—Å—å –±—É–ª–æ –≤–∏–¥–Ω–æ (–≤–∏–¥–∞–ª–∏ –ø—ñ—Å–ª—è —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó)
  setLight("traffic-light", "green");
  setLight("cross-traffic", "red");
}
